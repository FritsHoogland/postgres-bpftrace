#!/usr/bin/env bpftrace
#include <linux/sched.h>
#include <signal.h>
//
// This script should be run with a (part of) the task name to match
// for measuring the on and off cpu times.
//
BEGIN {
  if ( $# != 1 )
  {
    printf("First argument must be the task name.\n");
    exit();
  }
}
tracepoint:sched:sched_waking
/ strcontains(args->comm, str($1)) /
{
  @wake_time[args->pid] = nsecs;
}
tracepoint:sched:sched_switch
{
  $time = nsecs;
  if ( strcontains(args->next_comm, str($1)) )
  {
    @schedule[args->next_pid] = $time;
    if ( @wake_time[args->next_pid] != 0 )
    {
      //@wake_time_histogram_us = hist(($time - @wake_time[args->next_pid])/1000);
      @wake_time[args->next_pid]=0;
    }
    else
    {
      if ( @leave_time[args->next_pid] != 0 )
      {
        @off_cpu_histogram_us = hist(($time - @leave_time[args->next_pid])/1000);
        @off_cpu_total_us += ($time - @leave_time[args->next_pid])/1000;
        @off_cpu_count += 1;
      }
    }
  }
  if ( strcontains(args->prev_comm, str($1)) )
  {
    if ( @schedule[args->prev_pid] != 0 )
    {
      $slice_time = ($time - @schedule[args->prev_pid])/1000;
      @slice_time_histogram_us = hist($slice_time);
      @leave_time[args->prev_pid]=$time;
      @slice_time_total_us += $slice_time;
      @slice_time_count += 1;
    }
  }
}
END
{
  printf("\nAverage off-cpu time: %10u us, total: %d ms\n", @off_cpu_total_us/@off_cpu_count, @off_cpu_total_us/1000);
  printf("Average slice time  : %10u us, total: %d ms\n", @slice_time_total_us/@slice_time_count, @slice_time_total_us/1000);
  clear(@schedule);
  clear(@wake_time);
  clear(@leave_time);
  clear(@slice_time_total_us);
  clear(@slice_time_count);
  clear(@off_cpu_total_us);
  clear(@off_cpu_count);
}
