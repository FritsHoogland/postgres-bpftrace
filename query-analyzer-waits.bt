#!/usr/bin/env bpftrace
// Requires:
// - bpftrace, linux-libc-dev (debian)
//
// Add -p <pid> to filter on a single process (select bg_backend_pid())
//
// FIXME: path to postgres executable is hard coded
// FIXME: if an error occurs in the execute phase, there is no query_execute_done probe fired, and the portal counter stays at current value
BEGIN
{
    printf("PostgreSQL statement execution analyzer.\n");
    printf("Time in microseconds (us).\n");
    printf("pid   :Phase      :time to phase :time in phase : query\n");
    printf("------|-----------|--------------|--------------|------\n");
    @wait_class[0x01000000]="lwlock";
    @wait_class[0x03000000]="lock";
    @wait_class[0x04000000]="bufferpin";
    @wait_class[0x05000000]="activity";
    @wait_class[0x06000000]="client";
    @wait_class[0x07000000]="extensions";
    @wait_class[0x08000000]="ipc";
    @wait_class[0x09000000]="timeout";
    @wait_class[0x0A000000]="io";
@wait_name[0x05000000,0]="ARCHIVER_MAIN";
@wait_name[0x05000000,1]="AUTOVACUUM_MAIN";
@wait_name[0x05000000,2]="BGWRITER_HIBERNATE";
@wait_name[0x05000000,3]="BGWRITER_MAIN";
@wait_name[0x05000000,4]="CHECKPOINTER_MAIN";
@wait_name[0x05000000,5]="LOGICAL_APPLY_MAIN";
@wait_name[0x05000000,6]="LOGICAL_LAUNCHER_MAIN";
@wait_name[0x05000000,7]="LOGICAL_PARALLEL_APPLY_MAIN";
@wait_name[0x05000000,8]="RECOVERY_WAL_STREAM";
@wait_name[0x05000000,9]="SYSLOGGER_MAIN";
@wait_name[0x05000000,10]="WAL_RECEIVER_MAIN";
@wait_name[0x05000000,11]="WAL_SENDER_MAIN";
@wait_name[0x05000000,12]="WAL_WRITER_MAIN";
@wait_name[0x06000000,0]="CLIENT_READ";
@wait_name[0x06000000,1]="CLIENT_WRITE";
@wait_name[0x06000000,2]="GSS_OPEN_SERVER";
@wait_name[0x06000000,3]="LIBPQWALRECEIVER_CONNECT";
@wait_name[0x06000000,4]="LIBPQWALRECEIVER_RECEIVE";
@wait_name[0x06000000,5]="SSL_OPEN_SERVER";
@wait_name[0x06000000,6]="WAL_SENDER_WAIT_FOR_WAL";
@wait_name[0x06000000,7]="WAL_SENDER_WRITE_DATA";
@wait_name[0x08000000,0]="APPEND_READY";
@wait_name[0x08000000,1]="ARCHIVE_CLEANUP_COMMAND";
@wait_name[0x08000000,2]="ARCHIVE_COMMAND";
@wait_name[0x08000000,3]="BACKEND_TERMINATION";
@wait_name[0x08000000,4]="BACKUP_WAIT_WAL_ARCHIVE";
@wait_name[0x08000000,5]="BGWORKER_SHUTDOWN";
@wait_name[0x08000000,6]="BGWORKER_STARTUP";
@wait_name[0x08000000,7]="BTREE_PAGE";
@wait_name[0x08000000,8]="BUFFER_IO";
@wait_name[0x08000000,9]="CHECKPOINT_DONE";
@wait_name[0x08000000,10]="CHECKPOINT_START";
@wait_name[0x08000000,11]="EXECUTE_GATHER";
@wait_name[0x08000000,12]="HASH_BATCH_ALLOCATE";
@wait_name[0x08000000,13]="HASH_BATCH_ELECT";
@wait_name[0x08000000,14]="HASH_BATCH_LOAD";
@wait_name[0x08000000,15]="HASH_BUILD_ALLOCATE";
@wait_name[0x08000000,16]="HASH_BUILD_ELECT";
@wait_name[0x08000000,17]="HASH_BUILD_HASH_INNER";
@wait_name[0x08000000,18]="HASH_BUILD_HASH_OUTER";
@wait_name[0x08000000,19]="HASH_GROW_BATCHES_DECIDE";
@wait_name[0x08000000,20]="HASH_GROW_BATCHES_ELECT";
@wait_name[0x08000000,21]="HASH_GROW_BATCHES_FINISH";
@wait_name[0x08000000,22]="HASH_GROW_BATCHES_REALLOCATE";
@wait_name[0x08000000,23]="HASH_GROW_BATCHES_REPARTITION";
@wait_name[0x08000000,24]="HASH_GROW_BUCKETS_ELECT";
@wait_name[0x08000000,25]="HASH_GROW_BUCKETS_REALLOCATE";
@wait_name[0x08000000,26]="HASH_GROW_BUCKETS_REINSERT";
@wait_name[0x08000000,27]="LOGICAL_APPLY_SEND_DATA";
@wait_name[0x08000000,28]="LOGICAL_PARALLEL_APPLY_STATE_CHANGE";
@wait_name[0x08000000,29]="LOGICAL_SYNC_DATA";
@wait_name[0x08000000,30]="LOGICAL_SYNC_STATE_CHANGE";
@wait_name[0x08000000,31]="MESSAGE_QUEUE_INTERNAL";
@wait_name[0x08000000,32]="MESSAGE_QUEUE_PUT_MESSAGE";
@wait_name[0x08000000,33]="MESSAGE_QUEUE_RECEIVE";
@wait_name[0x08000000,34]="MESSAGE_QUEUE_SEND";
@wait_name[0x08000000,35]="PARALLEL_BITMAP_SCAN";
@wait_name[0x08000000,36]="PARALLEL_CREATE_INDEX_SCAN";
@wait_name[0x08000000,37]="PARALLEL_FINISH";
@wait_name[0x08000000,38]="PROCARRAY_GROUP_UPDATE";
@wait_name[0x08000000,39]="PROC_SIGNAL_BARRIER";
@wait_name[0x08000000,40]="PROMOTE";
@wait_name[0x08000000,41]="RECOVERY_CONFLICT_SNAPSHOT";
@wait_name[0x08000000,42]="RECOVERY_CONFLICT_TABLESPACE";
@wait_name[0x08000000,43]="RECOVERY_END_COMMAND";
@wait_name[0x08000000,44]="RECOVERY_PAUSE";
@wait_name[0x08000000,45]="REPLICATION_ORIGIN_DROP";
@wait_name[0x08000000,46]="REPLICATION_SLOT_DROP";
@wait_name[0x08000000,47]="RESTORE_COMMAND";
@wait_name[0x08000000,48]="SAFE_SNAPSHOT";
@wait_name[0x08000000,49]="SYNC_REP";
@wait_name[0x08000000,50]="WAL_RECEIVER_EXIT";
@wait_name[0x08000000,51]="WAL_RECEIVER_WAIT_START";
@wait_name[0x08000000,52]="XACT_GROUP_UPDATE";
@wait_name[0x09000000,0]="BASE_BACKUP_THROTTLE";
@wait_name[0x09000000,1]="CHECKPOINT_WRITE_DELAY";
@wait_name[0x09000000,2]="PG_SLEEP";
@wait_name[0x09000000,3]="RECOVERY_APPLY_DELAY";
@wait_name[0x09000000,4]="RECOVERY_RETRIEVE_RETRY_INTERVAL";
@wait_name[0x09000000,5]="REGISTER_SYNC_REQUEST";
@wait_name[0x09000000,6]="SPIN_DELAY";
@wait_name[0x09000000,7]="VACUUM_DELAY";
@wait_name[0x09000000,8]="VACUUM_TRUNCATE";
@wait_name[0x0A000000,0]="BASEBACKUP_READ";
@wait_name[0x0A000000,1]="BASEBACKUP_SYNC";
@wait_name[0x0A000000,2]="BASEBACKUP_WRITE";
@wait_name[0x0A000000,3]="BUFFILE_READ";
@wait_name[0x0A000000,4]="BUFFILE_WRITE";
@wait_name[0x0A000000,5]="BUFFILE_TRUNCATE";
@wait_name[0x0A000000,6]="CONTROL_FILE_READ";
@wait_name[0x0A000000,7]="CONTROL_FILE_SYNC";
@wait_name[0x0A000000,8]="CONTROL_FILE_SYNC_UPDATE";
@wait_name[0x0A000000,9]="CONTROL_FILE_WRITE";
@wait_name[0x0A000000,10]="CONTROL_FILE_WRITE_UPDATE";
@wait_name[0x0A000000,11]="COPY_FILE_READ";
@wait_name[0x0A000000,12]="COPY_FILE_WRITE";
@wait_name[0x0A000000,13]="DATA_FILE_EXTEND";
@wait_name[0x0A000000,14]="DATA_FILE_FLUSH";
@wait_name[0x0A000000,15]="DATA_FILE_IMMEDIATE_SYNC";
@wait_name[0x0A000000,16]="DATA_FILE_PREFETCH";
@wait_name[0x0A000000,17]="DATA_FILE_READ";
@wait_name[0x0A000000,18]="DATA_FILE_SYNC";
@wait_name[0x0A000000,19]="DATA_FILE_TRUNCATE";
@wait_name[0x0A000000,20]="DATA_FILE_WRITE";
@wait_name[0x0A000000,21]="DSM_ALLOCATE";
@wait_name[0x0A000000,22]="DSM_FILL_ZERO_WRITE";
@wait_name[0x0A000000,23]="LOCK_FILE_ADDTODATADIR_READ";
@wait_name[0x0A000000,24]="LOCK_FILE_ADDTODATADIR_SYNC";
@wait_name[0x0A000000,25]="LOCK_FILE_ADDTODATADIR_WRITE";
@wait_name[0x0A000000,26]="LOCK_FILE_CREATE_READ";
@wait_name[0x0A000000,27]="LOCK_FILE_CREATE_SYNC";
@wait_name[0x0A000000,28]="LOCK_FILE_CREATE_WRITE";
@wait_name[0x0A000000,29]="LOCK_FILE_RECHECKDATADIR_READ";
@wait_name[0x0A000000,30]="LOGICAL_REWRITE_CHECKPOINT_SYNC";
@wait_name[0x0A000000,31]="LOGICAL_REWRITE_MAPPING_SYNC";
@wait_name[0x0A000000,32]="LOGICAL_REWRITE_MAPPING_WRITE";
@wait_name[0x0A000000,33]="LOGICAL_REWRITE_SYNC";
@wait_name[0x0A000000,34]="LOGICAL_REWRITE_TRUNCATE";
@wait_name[0x0A000000,35]="LOGICAL_REWRITE_WRITE";
@wait_name[0x0A000000,36]="RELATION_MAP_READ";
@wait_name[0x0A000000,37]="RELATION_MAP_REPLACE";
@wait_name[0x0A000000,38]="RELATION_MAP_WRITE";
@wait_name[0x0A000000,39]="REORDER_BUFFER_READ";
@wait_name[0x0A000000,40]="REORDER_BUFFER_WRITE";
@wait_name[0x0A000000,41]="REORDER_LOGICAL_MAPPING_READ";
@wait_name[0x0A000000,42]="REPLICATION_SLOT_READ";
@wait_name[0x0A000000,43]="REPLICATION_SLOT_RESTORE_SYNC";
@wait_name[0x0A000000,44]="REPLICATION_SLOT_SYNC";
@wait_name[0x0A000000,45]="REPLICATION_SLOT_WRITE";
@wait_name[0x0A000000,46]="SLRU_FLUSH_SYNC";
@wait_name[0x0A000000,47]="SLRU_READ";
@wait_name[0x0A000000,48]="SLRU_SYNC";
@wait_name[0x0A000000,49]="SLRU_WRITE";
@wait_name[0x0A000000,50]="SNAPBUILD_READ";
@wait_name[0x0A000000,51]="SNAPBUILD_SYNC";
@wait_name[0x0A000000,52]="SNAPBUILD_WRITE";
@wait_name[0x0A000000,53]="TIMELINE_HISTORY_FILE_SYNC";
@wait_name[0x0A000000,54]="TIMELINE_HISTORY_FILE_WRITE";
@wait_name[0x0A000000,55]="TIMELINE_HISTORY_READ";
@wait_name[0x0A000000,56]="TIMELINE_HISTORY_SYNC";
@wait_name[0x0A000000,57]="TIMELINE_HISTORY_WRITE";
@wait_name[0x0A000000,58]="TWOPHASE_FILE_READ";
@wait_name[0x0A000000,59]="TWOPHASE_FILE_SYNC";
@wait_name[0x0A000000,60]="TWOPHASE_FILE_WRITE";
@wait_name[0x0A000000,61]="VERSION_FILE_WRITE";
@wait_name[0x0A000000,62]="WALSENDER_TIMELINE_HISTORY_READ";
@wait_name[0x0A000000,63]="WAL_BOOTSTRAP_SYNC";
@wait_name[0x0A000000,64]="WAL_BOOTSTRAP_WRITE";
@wait_name[0x0A000000,65]="WAL_COPY_READ";
@wait_name[0x0A000000,66]="WAL_COPY_SYNC";
@wait_name[0x0A000000,67]="WAL_COPY_WRITE";
@wait_name[0x0A000000,68]="WAL_INIT_SYNC";
@wait_name[0x0A000000,69]="WAL_INIT_WRITE";
@wait_name[0x0A000000,70]="WAL_READ";
@wait_name[0x0A000000,71]="WAL_SYNC";
@wait_name[0x0A000000,72]="WAL_SYNC_METHOD_ASSIGN";
@wait_name[0x0A000000,73]="WAL_WRITE";
@wait_name[0x04000000,0]="BUFFER_PIN";
@wait_name[0x07000000,0]="Extension";
@wait_name[0x01000000,0]="ShmemIndex";
@wait_name[0x01000000,1]="OidGen";
@wait_name[0x01000000,2]="XidGen";
@wait_name[0x01000000,3]="ProcArray";
@wait_name[0x01000000,4]="SInvalRead";
@wait_name[0x01000000,5]="SInvalWrite";
@wait_name[0x01000000,6]="WALBufMapping";
@wait_name[0x01000000,7]="WALWrite";
@wait_name[0x01000000,8]="ControlFile";
@wait_name[0x01000000,9]="XactSLRU";
@wait_name[0x01000000,10]="SubtransSLRU";
@wait_name[0x01000000,11]="MultiXactGen";
@wait_name[0x01000000,12]="MultiXactOffsetSLRU";
@wait_name[0x01000000,13]="MultiXactMemberSLRU";
@wait_name[0x01000000,14]="RelCacheInit";
@wait_name[0x01000000,15]="CheckpointerComm";
@wait_name[0x01000000,16]="TwoPhaseState";
@wait_name[0x01000000,17]="TablespaceCreate";
@wait_name[0x01000000,18]="BtreeVacuum";
@wait_name[0x01000000,19]="AddinShmemInit";
@wait_name[0x01000000,20]="Autovacuum";
@wait_name[0x01000000,21]="AutovacuumSchedule";
@wait_name[0x01000000,22]="SyncScan";
@wait_name[0x01000000,23]="RelationMapping";
@wait_name[0x01000000,24]="NotifySLRU";
@wait_name[0x01000000,25]="NotifyQueue";
@wait_name[0x01000000,26]="SerializableXactHash";
@wait_name[0x01000000,27]="SerializableFinishedList";
@wait_name[0x01000000,28]="SerializablePredicateList";
@wait_name[0x01000000,29]="SerialSLRU";
@wait_name[0x01000000,30]="SyncRep";
@wait_name[0x01000000,31]="BackgroundWorker";
@wait_name[0x01000000,32]="DynamicSharedMemoryControl";
@wait_name[0x01000000,33]="AutoFile";
@wait_name[0x01000000,34]="ReplicationSlotAllocation";
@wait_name[0x01000000,35]="ReplicationSlotControl";
@wait_name[0x01000000,36]="CommitTsSLRU";
@wait_name[0x01000000,37]="CommitTs";
@wait_name[0x01000000,38]="ReplicationOrigin";
@wait_name[0x01000000,39]="MultiXactTruncation";
@wait_name[0x01000000,40]="LogicalRepWorker";
@wait_name[0x01000000,41]="XactTruncation";
@wait_name[0x01000000,42]="WrapLimitsVacuum";
@wait_name[0x01000000,43]="NotifyQueueTail";
@wait_name[0x01000000,44]="WaitEventExtension";
@wait_name[0x01000000,45]="XactBuffer";
@wait_name[0x01000000,46]="CommitTsBuffer";
@wait_name[0x01000000,47]="SubtransBuffer";
@wait_name[0x01000000,48]="MultiXactOffsetBuffer";
@wait_name[0x01000000,49]="MultiXactMemberBuffer";
@wait_name[0x01000000,50]="NotifyBuffer";
@wait_name[0x01000000,51]="SerialBuffer";
@wait_name[0x01000000,52]="WALInsert";
@wait_name[0x01000000,53]="BufferContent";
@wait_name[0x01000000,54]="ReplicationOriginState";
@wait_name[0x01000000,55]="ReplicationSlotIO";
@wait_name[0x01000000,56]="LockFastPath";
@wait_name[0x01000000,57]="BufferMapping";
@wait_name[0x01000000,58]="LockManager";
@wait_name[0x01000000,59]="PredicateLockManager";
@wait_name[0x01000000,60]="ParallelHashJoin";
@wait_name[0x01000000,61]="ParallelQueryDSA";
@wait_name[0x01000000,62]="PerSessionDSA";
@wait_name[0x01000000,63]="PerSessionRecordType";
@wait_name[0x01000000,64]="PerSessionRecordTypmod";
@wait_name[0x01000000,65]="SharedTupleStore";
@wait_name[0x01000000,66]="SharedTidBitmap";
@wait_name[0x01000000,67]="ParallelAppend";
@wait_name[0x01000000,68]="PerXactPredicateList";
@wait_name[0x01000000,69]="PgStatsDSA";
@wait_name[0x01000000,70]="PgStatsHash";
@wait_name[0x01000000,71]="PgStatsData";
@wait_name[0x01000000,72]="LogicalRepLauncherDSA";
@wait_name[0x01000000,73]="LogicalRepLauncherHash";
@wait_name[0x03000000,0]="relation";
@wait_name[0x03000000,1]="extend";
@wait_name[0x03000000,2]="frozenid";
@wait_name[0x03000000,3]="page";
@wait_name[0x03000000,4]="tuple";
@wait_name[0x03000000,5]="transactionid";
@wait_name[0x03000000,6]="virtualxid";
@wait_name[0x03000000,7]="spectoken";
@wait_name[0x03000000,8]="object";
@wait_name[0x03000000,9]="userlock";
@wait_name[0x03000000,10]="advisory";
@wait_name[0x03000000,11]="applytransaction";
}
usdt:/usr/local/pgsql/bin/postgres:statement__status
{
    @current_statement[pid] = str(arg0);
}
usdt:/usr/local/pgsql/bin/postgres:query__start
{
    $time = nsecs;
    printf("[%5u]Query start:              :              : %s\n", pid, str(arg0));
    @query_start[pid] = $time;
    @phase_done[pid] = $time;
    @query_trigger[pid] = 1;
}
usdt:/usr/local/pgsql/bin/postgres:query__done
{
    $time = nsecs;
    $query_end = $time - @query_start[pid];
    printf("[%5u]Query done : (%10u) :    %10u: %s\n", pid, ($time - @phase_done[pid])/1000, $query_end/1000, str(arg0));
    @parse[pid] = (uint64)0;
    @rewrite[pid] = (uint64)0;
    @plan[pid] = (uint64)0;
    @execute[pid] = (uint64)0;
    @query_trigger[pid] = 0;
}
usdt:/usr/local/pgsql/bin/postgres:query__parse__start
{
    $time = nsecs;
    if ( @query_trigger[pid] == 1 )
    {
        @to_parse[pid] = $time - @phase_done[pid];
    }
    else
    {
        @to_parse[pid] = 0;
    }
    @parse_start[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__parse__done
{
    $time = nsecs;
    @parse[pid] += $time - @parse_start[pid];
    printf("[%5u] parse     : (%10u) :    %10u: %s\n", pid, @to_parse[pid]/1000, ($time - @parse_start[pid])/1000, str(arg0));
    @phase_done[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__rewrite__start
{
    $time = nsecs;
    @to_rewrite[pid] = $time - @phase_done[pid];
    @rewrite_start[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__rewrite__done
{
    $time = nsecs;
    @rewrite[pid] += $time - @rewrite_start[pid];
    printf("[%5u] rewrite   : (%10u) :    %10u: %s\n", pid, @to_rewrite[pid]/1000, ($time - @rewrite_start[pid])/1000, str(arg0));
    @phase_done[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__plan__start
{
    $time = nsecs;
    @to_plan[pid] = $time - @phase_done[pid];
    @plan_start[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__plan__done
{
    $time = nsecs;
    @plan[pid] += $time - @plan_start[pid];
    printf("[%5u] plan      : (%10u) :    %10u: %s\n", pid, @to_plan[pid]/1000, ($time - @plan_start[pid])/1000, @current_statement[pid]);
    @phase_done[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__execute__start
{
    $time = nsecs;
    @portal_counter[pid]+=1;
    @to_execute[pid, @portal_counter[pid]] = $time - @phase_done[pid];
    @execute_start[pid, @portal_counter[pid]] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:query__execute__done
{
    $time = nsecs;
    if ( @portal_counter[pid] == 1 )
    {
        printf("[%5u] execute   : (%10u) :    %10u: %s\n", pid, @to_execute[pid, @portal_counter[pid]]/1000, ($time - @execute_start[pid, @portal_counter[pid]])/1000, @current_statement[pid]);
    }
    else
    {
        printf("[%5u] execute   : (%10u) :    %10u: %s\n", pid, 0, ($time - @execute_start[pid, @portal_counter[pid]])/1000, @current_statement[pid]);
    }
    @portal_counter[pid]-=1;
    @phase_done[pid] = $time;
}
usdt:/usr/local/pgsql/bin/postgres:wait__event__start
{
    $time = nsecs;
    $pid = pid;
    $arg0 = arg0;
    @wait_event_start[$pid] = $time;
    @wait_event_class[$pid] = @wait_class[ $arg0 & 0xFF000000 ];
    @wait_event_name[$pid] = @wait_name[ $arg0 & 0xFF000000, $arg0 & 0x00FFFFFF ];
}
usdt:/usr/local/pgsql/bin/postgres:wait__event__end
{
    $pid = pid;
    printf("[%5u] WAIT      : (%10s) :    %10u: %s.%s\n", pid, " ", (nsecs - @wait_event_start[$pid])/1000, @wait_event_class[$pid], @wait_event_name[$pid]);
}
END
{
    clear(@query_start);
    clear(@query_trigger);
    clear(@to_parse);
    clear(@parse_start);
    clear(@parse);
    clear(@to_rewrite);
    clear(@rewrite_start);
    clear(@rewrite);
    clear(@to_plan);
    clear(@plan_start);
    clear(@plan);
    clear(@to_execute);
    clear(@execute_start);
    clear(@execute);
    clear(@portal_counter);
    clear(@phase_done);
    clear(@current_statement);
    clear(@wait_event_start);
    clear(@wait_event_class);
    clear(@wait_event_name);
    clear(@wait_class);
    clear(@wait_name);
}
